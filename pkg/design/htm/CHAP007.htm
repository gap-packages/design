<html><head><title>[design] 7 Classifying block designs</title></head>
<body text="#000000" bgcolor="#ffffff">
[<a href = "chapters.htm">Up</a>] [<a href ="CHAP006.htm">Previous</a>] [<a href ="CHAP008.htm">Next</a>] [<a href = "theindex.htm">Index</a>]
<h1>7 Classifying block designs</h1><p>
<P>
<H3>Sections</H3>
<oL>
<li> <A HREF="CHAP007.htm#SECT001">The function BlockDesigns</a>
</ol><p>
<p>
This chapter describes the function <code>BlockDesigns</code> which can classify
block designs with given properties.  The possible properties a user
can specify are many and varied, and are described below. Depending on
the properties, this function can handle block designs with up to about
20 points (sometimes more and sometimes less, depending on the problem).
<p>
<p>
<h2><a name="SECT001">7.1 The function BlockDesigns</a></h2>
<p><p>
<a name = "SSEC001.1"></a>
<li><code>BlockDesigns( </code><var>param</var><code> )</code>
<p>
This function returns a list <var>DL</var> of block designs whose properties are
specified by the user in the record <var>param</var>. The precise interpretation
of the output depends on <var>param</var>, described below. Only binary designs
are generated by this function, if <code></code><var>param</var><code>.blockDesign</code> is unbound
or is a binary design.
<p>
The required components of <var>param</var> are <code>v</code>, <code>blockSizes</code>, and
<code>tSubsetStructure</code>.
<p>
<code></code><var>param</var><code>.v</code> must be a positive integer, and specifies that for each block
design in the list <var>DL</var>, the points are 1,...,<code></code><var>param</var><code>.v</code>.
<p>
<code></code><var>param</var><code>.blockSizes</code> must be a set of positive integers, and specifies
that the block sizes of each block design in <var>DL</var> will be contained in
<code></code><var>param</var><code>.blockSizes</code>.
<p>
<code></code><var>param</var><code>.tSubsetStructure</code> must be a record, having
components <code>t</code>, <code>partition</code>, and <code>lambdas</code>. Let <var>t</var>
be equal to <code></code><var>param</var><code>.tSubsetStructure.t</code>, <var>partition</var>
be <code></code><var>param</var><code>.tSubsetStructure.partition</code>, and <var>lambdas</var> be
<code></code><var>param</var><code>.tSubsetStructure.lambdas</code>.  Then <var>t</var> must be a non-negative
integer, <var>partition</var> must be a list of non-empty sets of <var>t</var>-subsets of
<code>[1..</code><var>param</var><code>.v]</code>, forming an ordered partition of all the <var>t</var>-subsets of
<code>[1..</code><var>param</var><code>.v]</code>, and <var>lambdas</var> must be a list of distinct non-negative
integers (not all zero) of the same length as <var>partition</var>. This specifies
that for each design in <var>DL</var>, each <var>t</var>-subset in <code></code><var>partition</var><code>[</code><var>i</var><code>]</code>
will occur exactly <code></code><var>lambdas</var><code>[</code><var>i</var><code>]</code> times, counted over all blocks of
the design.  For binary designs, this means that each <var>t</var>-subset in
<code></code><var>partition</var><code>[</code><var>i</var><code>]</code> is contained in exactly <code></code><var>lambdas</var><code>[</code><var>i</var><code>]</code> blocks.
The <code>partition</code> component is optional if <var>lambdas</var> has length 1.
We require that <var>t</var> is less than or equal to each element of
<code></code><var>param</var><code>.blockSizes</code>, and if <code></code><var>param</var><code>.blockDesign</code> is bound,
then each block of <code></code><var>param</var><code>.blockDesign</code> must contain at least <var>t</var>
distinct elements. Note that if <code></code><var>param</var><code>.tSubsetStructure</code> is equal to
<code>rec(t:=0,lambdas:=[</code><var>b</var><code>])</code>, for some positive integer <var>b</var>, then all
that is being specified is that each design in <var>DL</var> must have exactly
<var>b</var> blocks.
<p>
The optional components of <var>param</var> are used to specify additional
constraints on the designs in <var>DL</var> or to change default parameter
values. These optional components are <code>blockDesign</code>, <code>r</code>, <code>b</code>,
<code>blockNumbers</code>, <code>blockIntersectionNumbers</code>, <code>blockMaxMultiplicities</code>,
<code>isoGroup</code>, <code>requiredAutSubgroup</code>, and <code>isoLevel</code>.
<p>
<code></code><var>param</var><code>.blockDesign</code> must  be a block design with <code></code><var>param</var><code>.blockDesign.v</code>
equal to <code></code><var>param</var><code>.v</code>. Then each block multiset of a design in <var>DL</var> will
be a submultiset of <code></code><var>param</var><code>.blockDesign.blocks</code> (that is, each block of
a design <var>D</var> in <var>DL</var> will be a block of <code></code><var>param</var><code>.blockDesign</code>, and the
multiplicity of a block of <var>D</var> will be less than or equal to that block's
multiplicity in <code></code><var>param</var><code>.blockDesign</code>). The <code>blockDesign</code> component is
useful for the computation of subdesigns, such as parallel classes.
<p>
<code></code><var>param</var><code>.r</code> must be a positive integer, and specifies that in each design
in <var>DL</var>, each point will occur exactly <code></code><var>param</var><code>.r</code> times in the list of
blocks. In other words, each design in <var>DL</var> will have replication number
<code></code><var>param</var><code>.r</code>.
<p>
<code></code><var>param</var><code>.b</code> must be a positive integer, and specifies that each design
in <var>DL</var> will have exactly <code></code><var>param</var><code>.b</code> blocks.
<p>
<code></code><var>param</var><code>.blockNumbers</code> must be a list of non-negative integers, the <var>i</var>-th
element of which specifies the number of blocks whose size is equal
to <code></code><var>param</var><code>.blockSizes[</code><var>i</var><code>]</code> (for each design in <var>DL</var>). The length of
<code></code><var>param</var><code>.blockNumbers</code> must equal that of <code></code><var>param</var><code>.blockSizes</code>, and at
least one entry of <code></code><var>param</var><code>.blockNumbers</code> must be positive.
<p>
<code></code><var>param</var><code>.blockIntersectionNumbers</code> must be a symmetric matrix of sets
of non-negative integers, the <code>[</code><var>i</var><code>][</code><var>j</var><code>]</code>-element of which specifies
the set of possible sizes for the intersection of a block <var>B</var> of
size <code></code><var>param</var><code>.blockSizes[</code><var>i</var><code>]</code> with a different block (but possibly
a repeat of <var>B</var>) of size <code></code><var>param</var><code>.blockSizes[</code><var>j</var><code>]</code> (for each design
in <var>DL</var>). In the case of multisets, we take the multiplicity of an
element in the intersection to be the minimum of its multiplicities in
the multisets being intersected; for example, the intersection of
<code>[1,1,1,2,2,3]</code> with <code>[1,1,2,2,2,4]</code> is <code>[1,1,2,2]</code>, having size 4. The
dimension of <code></code><var>param</var><code>.blockIntersectionNumbers</code> must equal the length of
<code></code><var>param</var><code>.blockSizes</code>.
<p>
<code></code><var>param</var><code>.blockMaxMultiplicities</code> must be a list of non-negative integers,
the <var>i</var>-th element of which specifies an upper bound on the multiplicity
of a block whose size is equal to <code></code><var>param</var><code>.blockSizes[</code><var>i</var><code>]</code> (for each
design in <var>DL</var>). The length of <code></code><var>param</var><code>.blockMaxMultiplicities</code> must
equal that of <code></code><var>param</var><code>.blockSizes</code>.
<p>
Let <var>G</var> be the automorphism group of <code></code><var>param</var><code>.blockDesign</code> if bound, and
<var>G</var> be <code>SymmetricGroup(</code><var>param</var><code>.v)</code> otherwise. Let <var>H</var> be the subgroup of
<var>G</var> stabilizing <code></code><var>param</var><code>.tSubsetStructure.partition</code> (as an ordered list
of sets of sets) if bound, and <var>H</var> be equal to <var>G</var> otherwise. 
<p>
<code></code><var>param</var><code>.isoGroup</code> must be a subgroup of <var>H</var>, and specifies that we
consider two designs with the required properties to be <strong>equivalent</strong>
if their block multisets are in the same orbit of <code></code><var>param</var><code>.isoGroup</code>
(in its action on multisets of multisets of <code>[1..</code><var>param</var><code>.v]</code>). The
default for <code></code><var>param</var><code>.isoGroup</code> is <var>H</var>. Thus, if <code></code><var>param</var><code>.blockDesign</code>
and <code></code><var>param</var><code>.isoGroup</code> are both unbound, equivalence is the same as
block-design isomorphism for the required designs.
<p>
<code></code><var>param</var><code>.requiredAutSubgroup</code> must be a subgroup of <code></code><var>param</var><code>.isoGroup</code>,
and specifies that each design in <var>DL</var> must be invariant under
<code></code><var>param</var><code>.requiredAutSubgroup</code> (in its action on multisets of multisets of
<code>[1..</code><var>param</var><code>.v]</code>). The default for <code></code><var>param</var><code>.requiredAutSubgroup</code> is the
trivial permutation group.
<p>
<code></code><var>param</var><code>.isoLevel</code> must be 0, 1, or 2 (the default is 2).  The value
0 specifies that <var>DL</var> will contain at most one block design, and will
contain one block design with the required properties if and only if
such a block design exists; the value&nbsp;1 specifies that <var>DL</var> will contain
(perhaps properly) a list of <code></code><var>param</var><code>.isoGroup</code>-orbit representatives of
the required designs; the value 2 specifies that <var>DL</var> will consist
precisely of <code></code><var>param</var><code>.isoGroup</code>-orbit representatives of the required
designs.
<p>
For an example, we classify up to isomorphism the 2-(15,3,1) designs
invariant under a semi-regular group of automorphisms of order 5, and
then classify all parallel classes of these designs, up to the action
of the automorphism groups of these designs.
<p>
<pre>
gap&gt; DL:=BlockDesigns(rec(
&gt;    v:=15,blockSizes:=[3],
&gt;    tSubsetStructure:=rec(t:=2,lambdas:=[1]),
&gt;    requiredAutSubgroup:=
&gt;       Group((1,2,3,4,5)(6,7,8,9,10)(11,12,13,14,15))));;
gap&gt; List(DL,AllTDesignLambdas);
[ [ 35, 7, 1 ], [ 35, 7, 1 ], [ 35, 7, 1 ] ]
gap&gt; List(DL,D-&gt;Size(AutGroupBlockDesign(D)));
[ 20160, 5, 60 ]
gap&gt; parclasses:=List(DL,D-&gt;
&gt;    BlockDesigns(rec(
&gt;       blockDesign:=D,
&gt;       v:=15,blockSizes:=[3],
&gt;       tSubsetStructure:=rec(t:=1,lambdas:=[1]))));
[ [ rec( isBlockDesign := true, v := 15, 
          blocks := [ [ 1, 2, 6 ], [ 3, 4, 8 ], [ 5, 7, 14 ], [ 9, 12, 15 ], 
              [ 10, 11, 13 ] ], 
          tSubsetStructure := rec( t := 1, lambdas := [ 1 ] ), 
          isBinary := true, isSimple := true, blockSizes := [ 3 ], 
          blockNumbers := [ 5 ], r := 1, 
          autSubgroup := Group([ (2,6)(3,11)(4,10)(5,14)(8,13)(12,15), 
              (2,6)(4,8)(5,12)(7,9)(10,13)(14,15), 
              (2,6)(3,12)(4,9)(7,14)(8,15)(11,13), 
              (3,12,5)(4,15,7)(8,9,14)(10,11,13), 
              (1,6,2)(3,4,8)(5,7,14)(9,12,15)(10,11,13), 
              (1,8,11,2,3,10)(4,13,6)(5,15,14,9,7,12) ]) ) ], 
  [ rec( isBlockDesign := true, v := 15, 
          blocks := [ [ 1, 7, 12 ], [ 2, 8, 13 ], [ 3, 9, 14 ], 
              [ 4, 10, 15 ], [ 5, 6, 11 ] ], 
          tSubsetStructure := rec( t := 1, lambdas := [ 1 ] ), 
          isBinary := true, isSimple := true, blockSizes := [ 3 ], 
          blockNumbers := [ 5 ], r := 1, 
          autSubgroup := Group([ (1,5,4,3,2)(6,10,9,8,7)(11,15,14,13,12) ]) ) 
     ], 
  [ rec( isBlockDesign := true, v := 15, blocks := [ [ 1, 2, 6 ], [ 3, 10, 13 
                 ], [ 4, 11, 12 ], [ 5, 7, 15 ], [ 8, 9, 14 ] ], 
          tSubsetStructure := rec( t := 1, lambdas := [ 1 ] ), 
          isBinary := true, isSimple := true, blockSizes := [ 3 ], 
          blockNumbers := [ 5 ], r := 1, 
          autSubgroup := Group([ (1,2)(3,5)(7,10)(8,9)(11,12)(13,15), 
              (1,11,8)(2,12,9)(3,13,10)(4,14,6)(5,15,7) ]) ), 
      rec( isBlockDesign := true, v := 15, 
          blocks := [ [ 1, 8, 11 ], [ 2, 9, 12 ], [ 3, 10, 13 ], 
              [ 4, 6, 14 ], [ 5, 7, 15 ] ], 
          tSubsetStructure := rec( t := 1, lambdas := [ 1 ] ), 
          isBinary := true, isSimple := true, blockSizes := [ 3 ], 
          blockNumbers := [ 5 ], r := 1, 
          autSubgroup := Group([ (1,2)(3,5)(7,10)(8,9)(11,12)(13,15), 
              (1,3,4,2)(6,9,8,10)(11,13,14,12), 
              (1,3,5,2,4)(6,8,10,7,9)(11,13,15,12,14), 
              (1,11,8)(2,12,9)(3,13,10)(4,14,6)(5,15,7) ]) ) ] ]
gap&gt; List(parclasses,Length);
[ 1, 1, 2 ]
gap&gt; List(parclasses,L-&gt;List(L,parclass-&gt;Size(parclass.autSubgroup)));
[ [ 360 ], [ 5 ], [ 6, 60 ] ]
</pre>
<p>
[<a href = "chapters.htm">Up</a>] [<a href ="CHAP006.htm">Previous</a>] [<a href ="CHAP008.htm">Next</a>] [<a href = "theindex.htm">Index</a>]
<P>
<address>design manual<br>November 2011
</address></body></html>